{
  "version": 3,
  "file": "KeployHome.css",
  "sources": [
    "KeployHome.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { fly } from \"svelte/transition\";\n  import { onMount } from \"svelte\";\n  // import lottie from 'lottie-web';\n\n  // const intro = 60; // final frame of the intro sequence\n  // const stopFrame = 180; // final frame of the stop icon appearing\n  // const recFrame = 240; // final frame of the record frame appearing (last frame which matches the intro frame to ensure it loops)\n\n  // let animationWindow;\n  // let anim;\n\n  // onMount(() => {\n  //   anim = lottie.loadAnimation({\n  //     container: animationWindow,\n  //     renderer: 'svg',\n  //     loop: false,\n  //     autoplay: true,\n  //     // we play the intro immediately\n  //     initialSegment: [0, intro],\n  //     path: 'https://assets.codepen.io/35984/record_button.json'\n  //   });\n\n  //   anim.setSpeed(1.61);\n\n  //   const onClick = (e) => {\n  //     if (anim.currentFrame > intro && anim.currentFrame <= stopFrame - intro - 1) {\n  //       console.log('playing from stop to record');\n  //       anim.playSegments([stopFrame, recFrame], true);\n  //     } else {\n  //       console.log('playing to stop icon');\n  //       anim.playSegments([intro, stopFrame], true);\n  //     }\n  //   };\n\n  //   // animationWindow.addEventListener('click', onClick);\n\n  //   return () => {\n  //     animationWindow.removeEventListener('click', onClick);\n  //     anim.destroy();\n  //   };\n  // });\n  onMount(() => {\n    const recordStatus = document.getElementById(\"recordStatus\");\n    const recordedTestCasesDiv = document.getElementById(\"recordedTestCases\");\n    const viewTestLogsButton = document.getElementById(\"viewTestLogsButton\");\n    const viewRecordLogsButton = document.getElementById(\n      \"viewRecordLogsButton\"\n    );\n    const stopTestButton = document.getElementById(\"stopTestingButton\");\n    const testResultsDiv = document.getElementById(\"testResults\");\n    const testStatus = document.getElementById(\"testStatus\");\n\n    window.addEventListener(\"message\", (event) => {\n      const message = event.data;\n      console.log(\"From Home\", message);\n      switch (message.type) {\n        case \"updateStatus\":\n          console.log(\"message.value\", message.value);\n          break;\n\n        case \"error\":\n          console.error(message.value);\n          break;\n\n        case \"success\":\n          console.log(message.value);\n          break;\n\n        case \"testcaserecorded\":\n          console.log(\"message.textContent\", message.textContent);\n          recordStatus.style.display = \"block\";\n          recordedTestCasesDiv.style.display = \"grid\";\n\n          if (message.error === true) {\n            recordStatus.textContent = `Failed To Record Test Cases`;\n            recordStatus.classList.add(\"error\");\n            const errorMessage = document.createElement(\"p\");\n            errorMessage.textContent = message.textContent;\n            errorMessage.classList.add(\"error\");\n            recordedTestCasesDiv.appendChild(errorMessage);\n            viewRecordLogsButton.style.display = \"block\";\n            break;\n          }\n\n          if (message.noTestCases === true) {\n            console.log(\"I am Called\");\n            viewRecordLogsButton.style.display = \"block\";\n            recordStatus.textContent = `No Test Cases Recorded`;\n            recordedTestCasesDiv.style.display = \"none\";\n            recordStatus.classList.add(\"info\");\n            break;\n          }\n          console.log(\"Why i am getting called\");\n          recordStatus.textContent = `Test Cases Recorded`;\n          recordStatus.classList.add(\"success\");\n          console.log(message.textContent);\n\n          if (recordedTestCasesDiv) {\n            let testSetDropdown = document.getElementById(message.testSetName);\n\n            if (!testSetDropdown) {\n              // Create a dropdown for the new test set\n              testSetDropdown = document.createElement(\"div\");\n              testSetDropdown.id = message.testSetName;\n              testSetDropdown.classList.add(\"dropdown-container\");\n\n              // Create a button to act as the dropdown toggle\n              const dropdownToggle = document.createElement(\"div\");\n              dropdownToggle.classList.add(\"dropdown-header\");\n\n              // Create the toggle text\n              const toggleText = document.createElement(\"span\");\n              // bind:this={startRecordingButton}\n              toggleText.textContent = message.testSetName;\n\n              // Create the dropdown icon\n              const dropdownIcon = document.createElement(\"span\");\n              dropdownIcon.className = \"dropdown-icon\";\n\n              // Append text and icon to the toggle\n              dropdownToggle.appendChild(toggleText);\n              dropdownToggle.appendChild(dropdownIcon);\n\n              // Create a container for the test cases\n              const testCaseContainer = document.createElement(\"div\");\n              testCaseContainer.classList.add(\"dropdown-content\");\n              testCaseContainer.style.display = \"none\"; // Hide initially\n\n              // Add toggle functionality\n              dropdownToggle.addEventListener(\"click\", () => {\n                testCaseContainer.style.display =\n                  testCaseContainer.style.display === \"none\" ? \"block\" : \"none\";\n                dropdownIcon.classList.toggle(\"open\"); // Update icon based on dropdown state\n              });\n\n              // Append the toggle and container to the dropdown\n              testSetDropdown.appendChild(dropdownToggle);\n              testSetDropdown.appendChild(testCaseContainer);\n\n              recordedTestCasesDiv.appendChild(testSetDropdown);\n            }\n\n            // Create the test case element\n            const testCaseElement = document.createElement(\"button\");\n            testCaseElement.classList.add(\"recordedTestCase\");\n            testCaseElement.addEventListener(\"click\", async () => {\n              vscode.postMessage({\n                type: \"openRecordedTestFile\",\n                value: message.path,\n              });\n            });\n\n            testCaseElement.textContent = message.textContent;\n\n            // Find the container and append the test case element\n            const testCaseContainer =\n              testSetDropdown.querySelector(\".dropdown-content\");\n            testCaseContainer.appendChild(testCaseElement);\n          }\n          break;\n\n        case \"recordfile\":\n          const projectFolder = document.getElementById(\"projectFolder\");\n          if (projectFolder) {\n            projectFolder.style.display = \"block\";\n            projectFolder.value = message.value;\n            FilePath = message.value;\n          }\n          break;\n\n        case \"testResults\":\n          console.log(\"message.value\", message.value);\n          const testCaseElement = document.createElement(\"p\");\n          //click the stop testing button\n          if (stopTestButton) {\n            stopTestButton.click();\n          }\n          testCaseElement.textContent = message.textSummary;\n          if (message.textSummary.includes(\"test passed\")) {\n            testCaseElement.classList.add(\"success\");\n          } else if (message.textSummary.includes(\"test failed\")) {\n            //split the textSummary\n            const numErrors = message.textSummary.split(\":\")[1];\n            if (numErrors !== \" 0\") {\n              viewTestLogsButton.style.display = \"block\";\n            }\n            testCaseElement.classList.add(\"error\");\n          } else {\n            testCaseElement.classList.add(\"info\");\n          }\n          if (message.isCompleteSummary === true) {\n            console.log(\"message.isCompleteSummary\", message.isCompleteSummary);\n            console.log(\"message.textSummary\", message.textSummary);\n            let messageList = message.textSummary.split(\"\\t\");\n            //remove all \"\" from the list\n            messageList = messageList.filter(function (el) {\n              return el !== \"\";\n            });\n            console.log(\"messageList\", messageList);\n            const testSuiteNameElement = document.createElement(\"p\");\n            testSuiteNameElement.textContent = messageList[0];\n            testSuiteNameDiv.appendChild(testSuiteNameElement);\n            const testCasesTotalElement = document.createElement(\"p\");\n            testCasesTotalElement.textContent = messageList[1];\n            totalTestCasesDiv.appendChild(testCasesTotalElement);\n            const testCasesPassedElement = document.createElement(\"p\");\n            testCasesPassedElement.textContent = messageList[2];\n            testCasesPassedDiv.appendChild(testCasesPassedElement);\n            const testCasesFailedElement = document.createElement(\"p\");\n            testCasesFailedElement.textContent = messageList[3];\n            testCasesFailedDiv.appendChild(testCasesFailedElement);\n            return;\n          }\n\n          if (message.error === true) {\n            viewCompleteSummaryButton.style.display = \"none\";\n            viewTestLogsButton.style.display = \"block\";\n          } else {\n            viewCompleteSummaryButton.style.display = \"block\";\n            completeSummaryHr.style.display = \"block\";\n          }\n          if (message.error === true) {\n            viewTestLogsButton.style.display = \"block\";\n            if (testStatus) {\n              testStatus.style.display = \"block\";\n              testStatus.textContent = message.value;\n              testStatus.classList.add(\"error\");\n            } else {\n              testResultsDiv.innerHTML = `<p class=\"error\">${message.value}</p>`;\n            }\n          }\n          testResultsDiv.appendChild(testCaseElement);\n          break;\n\n        case \"testfile\":\n          const Folder = document.getElementById(\"projectFolder\");\n          if (Folder) {\n            Folder.value = message.value;\n            FilePath = message.value;\n          }\n          const testCommandDiv = document.getElementById(\"testCommandInput\");\n          if (testCommandDiv) {\n            testCommandDiv.style.display = \"block\";\n          }\n          break;\n\n        case \"aggregatedTestResults\":\n          console.log(\"message.value\", message.value);\n          const lastTestResultsDiv = document.getElementById(\"lastTestResults\");\n          const totalTestCasesDiv = document.getElementById(\"totalTestCases\");\n          const testSuiteNameDiv = document.getElementById(\"testSuiteName\");\n          const testCasesPassedDiv = document.getElementById(\"testCasesPassed\");\n          const testCasesFailedDiv = document.getElementById(\"testCasesFailed\");\n\n          // Clear previous content\n          if (totalTestCasesDiv) {\n            totalTestCasesDiv.innerHTML = \"\";\n          }\n          if (testSuiteNameDiv) {\n            testSuiteNameDiv.innerHTML = \"\";\n          }\n          if (testCasesPassedDiv) {\n            testCasesPassedDiv.innerHTML = \"\";\n          }\n          if (testCasesFailedDiv) {\n            testCasesFailedDiv.innerHTML = \"\";\n          }\n\n          if (message.error === true) {\n            if (lastTestResultsDiv) {\n              const errorElement = document.createElement(\"p\");\n              errorElement.textContent = \"No Test Runs Found\";\n              errorElement.classList.add(\"error\");\n              errorElement.id = \"errorElement\";\n              lastTestResultsDiv.appendChild(errorElement);\n            }\n          } else {\n            // Group tests by date\n            const testsByDate = {};\n            message.data.testResults.forEach((test) => {\n              const date = test.date;\n              if (!testsByDate[date]) {\n                testsByDate[date] = [];\n              }\n              testsByDate[date].push(test);\n            });\n\n            const testCasesTotalElement = document.createElement(\"p\");\n            testCasesTotalElement.textContent = `Total Test Cases : ${message.data.total}`;\n            if (totalTestCasesDiv) {\n              totalTestCasesDiv.appendChild(testCasesTotalElement);\n            }\n\n            const testCasesPassedElement = document.createElement(\"p\");\n            testCasesPassedElement.textContent = `Test Cases Passed : ${message.data.success}`;\n            if (testCasesPassedDiv) {\n              testCasesPassedDiv.appendChild(testCasesPassedElement);\n            }\n\n            const testCasesFailedElement = document.createElement(\"p\");\n            testCasesFailedElement.textContent = `Test Cases Failed : ${message.data.failure}`;\n            if (testCasesFailedDiv) {\n              testCasesFailedDiv.appendChild(testCasesFailedElement);\n            }\n\n            // Create and append dropdown structure based on testsByDate\n            const dropdownContainer = document.createElement(\"div\");\n            dropdownContainer.className = \"dropdown-container\";\n\n            for (const date in testsByDate) {\n              if (testsByDate.hasOwnProperty(date)) {\n                const tests = testsByDate[date];\n\n                const dropdownHeader = document.createElement(\"div\");\n                dropdownHeader.className = \"dropdown-header\";\n\n                // Get current date\n                const currentDate = new Date();\n                const currentDateString = formatDate(currentDate);\n\n                // Get yesterday's date\n                const yesterday = new Date(currentDate);\n                yesterday.setDate(currentDate.getDate() - 1);\n                const yesterdayDateString = formatDate(yesterday);\n\n                if (currentDateString === date) {\n                  dropdownHeader.textContent = `Today`;\n                } else if (yesterdayDateString === date) {\n                  dropdownHeader.textContent = `Yesterday`;\n                } else {\n                  dropdownHeader.textContent = `${date}`;\n                }\n\n                // Add dropdown icon\n                const dropdownIcon = document.createElement(\"span\");\n                dropdownIcon.className = \"dropdown-icon\";\n\n                dropdownHeader.appendChild(dropdownIcon);\n                dropdownHeader.onclick = () => {\n                  const content = document.getElementById(`dropdown${date}`);\n                  if (content) {\n                    content.classList.toggle(\"show\");\n                    dropdownIcon.classList.toggle(\"open\"); // Update icon based on dropdown state\n                  }\n                };\n\n                const dropdownContent = document.createElement(\"div\");\n                dropdownContent.id = `dropdown${date}`;\n                dropdownContent.className = \"dropdown-content\";\n                tests.forEach((test, index) => {\n                  // Append individual test details\n                  const testMethod = document.createElement(\"div\");\n                  testMethod.textContent = `${test.method}`;\n                  if (test.status === \"PASSED\") {\n                    testMethod.classList.add(\"testSuccess\");\n                  } else {\n                    testMethod.classList.add(\"testError\");\n                  }\n                  dropdownContent.appendChild(testMethod);\n\n                  const testName = document.createElement(\"div\");\n                  testName.textContent = `${test.name}`;\n                  testName.classList.add(\"testName\");\n                  dropdownContent.appendChild(testName);\n\n                  testName.addEventListener(\"click\", async () => {\n                    vscode.postMessage({\n                      type: \"openTestFile\",\n                      value: test.testCasePath,\n                    });\n                  });\n                  testMethod.addEventListener(\"click\", async () => {\n                    vscode.postMessage({\n                      type: \"openTestFile\",\n                      value: test.testCasePath,\n                    });\n                  });\n                });\n\n                dropdownContainer.appendChild(dropdownHeader);\n                dropdownContainer.appendChild(dropdownContent);\n              }\n            }\n\n            if (lastTestResultsDiv) {\n              lastTestResultsDiv.appendChild(dropdownContainer);\n            }\n          }\n      }\n    });\n  });\n\n  let startRecordingButton;\n  let startTestingButton;\n  let buttonsSection = document.getElementById(\"buttonsSection\");\n  // let stopRecordingButton;\n  let stopTestingButton;\n  let isRecording = false;\n  let isTesting = false;\n  let showSteps = false;\n  let selectedIconButton = 1;\n  let settingsIcon = document.querySelector(\".settings-icon\");\n\n  function resetUI() {\n    const recordedTestCasesDiv = document.getElementById(\"recordedTestCases\");\n    const recordStatus = document.getElementById(\"recordStatus\");\n    const testStatus = document.getElementById(\"testStatus\");\n    const viewTestLogsButton = document.getElementById(\"viewTestLogsButton\");\n    const viewRecordLogsButton = document.getElementById(\n      \"viewRecordLogsButton\"\n    );\n    const testResultsDiv = document.getElementById(\"testResults\");\n    const lastTestResultsDiv = document.getElementById(\"lastTestResults\");\n    const testSuiteNameDiv = document.getElementById(\"testSuiteName\");\n    const totalTestCasesDiv = document.getElementById(\"totalTestCases\");\n    const testCasesPassedDiv = document.getElementById(\"testCasesPassed\");\n    const testCasesFailedDiv = document.getElementById(\"testCasesFailed\");\n    const viewCompleteSummaryButton = document.getElementById(\n      \"viewCompleteSummaryButton\"\n    );\n    const upperOutputDiv = document.getElementById(\"upperOutputDiv\");\n\n    if (recordedTestCasesDiv) {\n      recordedTestCasesDiv.innerHTML = \"\";\n    }\n    if (recordStatus) {\n      recordStatus.style.display = \"none\";\n      recordStatus.textContent = \"\";\n    }\n    if (viewRecordLogsButton) {\n      viewRecordLogsButton.style.display = \"none\";\n    }\n    if (viewTestLogsButton) {\n      viewTestLogsButton.style.display = \"none\";\n    }\n\n    if (testResultsDiv) {\n      testResultsDiv.innerHTML = \"\";\n    }\n    if (testStatus) {\n      testStatus.textContent = \"\";\n      testStatus.style.display = \"none\";\n    }\n    if (testSuiteNameDiv) {\n      testSuiteNameDiv.innerHTML = \"\";\n    }\n    if (totalTestCasesDiv) {\n      totalTestCasesDiv.innerHTML = \"\";\n    }\n    if (testCasesPassedDiv) {\n      testCasesPassedDiv.innerHTML = \"\";\n    }\n    if (testCasesFailedDiv) {\n      testCasesFailedDiv.innerHTML = \"\";\n    }\n    if (lastTestResultsDiv) {\n      lastTestResultsDiv.innerHTML = \"\";\n    }\n    if (viewCompleteSummaryButton) {\n      viewCompleteSummaryButton.style.display = \"none\";\n    }\n    if (upperOutputDiv) {\n      upperOutputDiv.style.display = \"none\";\n    }\n  }\n\n  const selectButton = (buttonNumber) => {\n    console.log(\"buttonNumber\", buttonNumber);\n    selectedIconButton = buttonNumber;\n    if (buttonNumber !== 2) {\n      clearLastTestResults();\n    }\n    if (buttonNumber !== 1) {\n      console.log(\"setting display none\");\n      startRecordingButton.style.display = \"none\";\n      startTestingButton.style.display = \"none\";\n    }\n    if (buttonNumber === 1) {\n      startRecordingButton.style.display = \"flex\";\n      startTestingButton.style.display = \"flex\";\n    }\n    if (buttonNumber === 3) {\n      settingsIcon.classList.toggle(\"open\"); // Update icon based on dropdown state\n    }\n  };\n  const clearLastTestResults = () => {\n    const testSuiteName = document.getElementById(\"testSuiteName\");\n    const totalTestCases = document.getElementById(\"totalTestCases\");\n    const testCasesPassed = document.getElementById(\"testCasesPassed\");\n    const testCasesFailed = document.getElementById(\"testCasesFailed\");\n    const errorElement = document.getElementById(\"errorElement\");\n    if (testSuiteName) testSuiteName.textContent = \"\";\n    if (totalTestCases) totalTestCases.textContent = \"\";\n    if (testCasesPassed) testCasesPassed.textContent = \"\";\n    if (testCasesFailed) testCasesFailed.textContent = \"\";\n    if (errorElement) errorElement.style.display = \"none\";\n  };\n  //   const triggerAnimation = () => {\n  //   if (anim.currentFrame > intro && anim.currentFrame <= stopFrame - intro - 1) {\n  //     console.log('playing from stop to record');\n  //     anim.playSegments([stopFrame, recFrame], true);\n  //   } else {\n  //     console.log('playing to stop icon');\n  //     anim.playSegments([intro, stopFrame], true);\n  //   }\n  // };\n\n  const toggleRecording = () => {\n    isRecording = !isRecording;\n    isTesting = false;\n    showSteps = !showSteps;\n    resetUI();\n    // triggerAnimation();\n    vscode.postMessage({\n      type: \"startRecordingCommand\",\n      value: `Recording Command...`,\n    });\n\n    clearLastTestResults();\n  };\n\n  const toggleTesting = () => {\n    isTesting = !isTesting;\n    isRecording = false;\n    showSteps = !showSteps;\n    resetUI();\n    // triggerAnimation();\n    vscode.postMessage({\n      type: \"startTestingCommand\",\n      value: `Testing Command...`,\n    });\n  };\n\n  const stop = () => {\n    isRecording = false;\n    isTesting = false;\n    showSteps = false;\n    // triggerAnimation();\n  };\n\n  const handleCompleteSummary = () => {\n    console.log(\"viewCompleteSummaryButton clicked\");\n\n    vscode.postMessage({\n      type: \"navigate\",\n      value: `Testresults`,\n    });\n\n    vscode.postMessage({\n      type: \"viewCompleteSummary\",\n      value: `View Complete Summary`,\n    });\n  };\n\n  const handlePreviousTestResults = () => {\n    vscode.postMessage({\n      type: \"viewPreviousTestResults\",\n      value: `viewPreviousTestResults`,\n    });\n    selectButton(2);\n  };\n\n  const handleOpenConfig = () => {\n    vscode.postMessage({\n      type: \"openConfigFile\",\n      value: `/keploy.yml`,\n    });\n\n    selectButton(3);\n  };\n\n  const handleViewTestLogs = () => {\n    vscode.postMessage({\n      type: \"viewLogs\",\n      value: `test_mode.log`,\n    });\n  };\n\n  const handleViewRecordLogs = () => {\n    vscode.postMessage({\n      type: \"viewLogs\",\n      value: `record_mode.log`,\n    });\n  };\n\n  const handleStopRecord = () => {\n    vscode.postMessage({\n      type: \"stopRecordingCommand\",\n      value: `Stop Recording`,\n    });\n  };\n\n  const handleStopTesting = () => {\n    vscode.postMessage({\n      type: \"stopTestingCommand\",\n      value: `Stop Testing`,\n    });\n  };\n\n  function formatDate(date) {\n    const day = String(date.getDate()).padStart(2, \"0\");\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  $: {\n    if (startRecordingButton) {\n      startRecordingButton.style.display =\n        isRecording || isTesting || selectedIconButton !== 1 ? \"none\" : \"flex\";\n    }\n    if (startTestingButton) {\n      startTestingButton.style.display =\n        isRecording || isTesting || selectedIconButton !== 1 ? \"none\" : \"flex\";\n    }\n    if (buttonsSection) {\n      buttonsSection.style.display =\n        isRecording || isTesting || selectedIconButton !== 1 ? \"none\" : \"flex\";\n    }\n    // if (stopRecordingButton) {\n    //   stopRecordingButton.style.display = isRecording ? 'inline' : 'none';\n    // }\n    // if (stopTestingButton) {\n    //   stopTestingButton.style.display = isTesting ? 'inline' : 'none';\n    // }\n    const loader = document.getElementById(\"loader\");\n    if (loader) {\n      loader.style.display = isRecording || isTesting ? \"block\" : \"none\";\n    }\n    const stopRecordingButton = document.getElementById(\"stopRecordingButton\");\n    if (stopRecordingButton) {\n      stopRecordingButton.style.display = isRecording ? \"inline\" : \"none\";\n    }\n    const stopTestingButton = document.getElementById(\"stopTestingButton\");\n    if (stopTestingButton) {\n      stopTestingButton.style.display = isTesting ? \"inline\" : \"none\";\n    }\n    const statusdiv = document.getElementById(\"statusdiv\");\n    if (statusdiv) {\n      statusdiv.style.display = selectedIconButton === 1 ? \"block\" : \"none\";\n    }\n    const viewTestLogs = document.getElementById(\"viewTestLogsButton\");\n    const viewRecordLogs = document.getElementById(\"viewRecordLogsButton\");\n  }\n\n  const recordingSteps = [\n    \"Step 1: Make sure the database is running\",\n    \"Step 2: The command is present in Config\",\n    \"Step 3: Make API Calls\",\n    \"Step 4: Save Recording\",\n  ];\n\n  const replayingSteps = [\n    \"Step 1: Initialize Replay\",\n    \"Step 2: Running Test Cases\",\n    \"Step 3: Execute Replay\",\n    \"Step 4: Verify Test Results\",\n  ];\n</script>\n\n<div class=\"container baloo-2-custom\">\n  <div class=\"icon-buttons\">\n    <button\n      id=\"keploycommands\"\n      class=\"icon-button {selectedIconButton === 1 ? 'selected' : ''}\"\n      on:click={() => selectButton(1)}\n    >\n      <span class=\"tooltip\">Record/Replay</span>\n      {#if isRecording}\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"35px\"\n          height=\"35px\"\n          viewBox=\"0 0 24 24\"\n          ><path\n            fill=\"#FF914D\"\n            d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2m0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8s8 3.58 8 8s-3.58 8-8 8m4-4H8V8h8z\"\n          /></svg\n        >\n      {:else}\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"35px\"\n          height=\"35px\"\n          viewBox=\"0 0 24 24\"\n          ><path\n            fill=\"#FF914D\"\n            d=\"M12 18c3.31 0 6-2.69 6-6s-2.69-6-6-6s-6 2.69-6 6s2.69 6 6 6\"\n            opacity=\"0.3\"\n          /><path\n            fill=\"#FF914D\"\n            d=\"M12 20c4.42 0 8-3.58 8-8s-3.58-8-8-8s-8 3.58-8 8s3.58 8 8 8m0-14c3.31 0 6 2.69 6 6s-2.69 6-6 6s-6-2.69-6-6s2.69-6 6-6\"\n          /></svg\n        >\n      {/if}\n      <!-- <div bind:this={animationWindow} id=\"animationWindow\"></div> -->\n    </button>\n    <button\n      id=\"displayPreviousTestResults\"\n      class=\"icon-button {selectedIconButton === 2 ? 'selected' : ''}\"\n      on:click={handlePreviousTestResults}\n    >\n      <span class=\"history-icon\"></span>\n      <span class=\"tooltip\">History</span>\n    </button>\n    <button\n      id=\"openConfig\"\n      class=\"icon-button {selectedIconButton === 3 ? 'selected' : ''}\"\n      on:click={handleOpenConfig}\n    >\n      <span class=\"settings-icon\"></span>\n      <span class=\"tooltip\">Settings</span>\n    </button>\n  </div>\n  <div class=\"header\">\n    <div class=\"heading\">\n      {#if selectedIconButton === 3}\n        <h1>Make changes to keploy config</h1>\n      {:else if selectedIconButton === 2}\n        <h1>View Previous Test Results</h1>\n      {:else}\n        <h1>\n          {isRecording\n            ? \"Recording Started\"\n            : isTesting\n              ? \"Testing Started\"\n              : \"Running Keploy\"}\n        </h1>\n      {/if}\n      <span\n        class=\"stop-button\"\n        on:click={() => {\n          stop();\n          handleStopRecord();\n        }}\n        on:keydown={(e) => e.key === \"Enter\" && stop()}\n        id=\"stopRecordingButton\"\n        role=\"button\"\n        tabindex=\"0\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"35px\"\n          height=\"35px\"\n          viewBox=\"0 0 24 24\"\n          ><path\n            fill=\"#FF914D\"\n            d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2m0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8s8 3.58 8 8s-3.58 8-8 8m4-4H8V8h8z\"\n          /></svg\n        >\n      </span>\n      <span\n        class=\"stop-button\"\n        on:click={() => {\n          stop();\n          handleStopTesting();\n        }}\n        on:keydown={(e) => e.key === \"Enter\" && stop()}\n        id=\"stopTestingButton\"\n        bind:this={stopTestingButton}\n        role=\"button\"\n        tabindex=\"0\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"35px\"\n          height=\"35px\"\n          viewBox=\"0 0 24 24\"\n          ><path\n            fill=\"#FF914D\"\n            d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2m0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8s8 3.58 8 8s-3.58 8-8 8m4-4H8V8h8z\"\n          /></svg\n        >\n      </span>\n    </div>\n    <div class=\"statusdiv\" id=\"statusdiv\">\n      <h3 id=\"recordStatus\"></h3>\n      <div id=\"recordedTestCases\"></div>\n      <h3 id=\"testStatus\"></h3>\n      <div id=\"testResults\"></div>\n      <button id=\"viewCompleteSummaryButton\" on:click={handleCompleteSummary}\n        >View Complete Test Summary</button\n      >\n      <button id=\"viewTestLogsButton\" on:click={handleViewTestLogs}\n        >View Logs</button\n      >\n      <button id=\"viewRecordLogsButton\" on:click={handleViewRecordLogs}\n        >View Logs</button\n      >\n      <hr id=\"completeSummaryHr\" />\n    </div>\n  </div>\n  {#if selectedIconButton === 2}\n    <div id=\"lastTestResults\">\n      <!-- svelte-ignore a11y-missing-content -->\n      <h3 id=\"testSuiteName\"></h3>\n    </div>\n  {/if}\n\n  <div class=\"section\" id=\"buttonsSection\">\n    <div\n      class=\"card\"\n      on:click={toggleRecording}\n      on:keydown={(e) => e.key === \"Enter\" && toggleRecording()}\n      tabindex=\"0\"\n      role=\"button\"\n      id=\"startRecordingButton\"\n      bind:this={startRecordingButton}\n    >\n      <div class=\"card-icon\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"35px\"\n          height=\"35px\"\n          viewBox=\"0 0 24 24\"\n          ><path\n            fill=\"#FF914D\"\n            d=\"M12 18c3.31 0 6-2.69 6-6s-2.69-6-6-6s-6 2.69-6 6s2.69 6 6 6\"\n            opacity=\"0.3\"\n          /><path\n            fill=\"#FF914D\"\n            d=\"M12 20c4.42 0 8-3.58 8-8s-3.58-8-8-8s-8 3.58-8 8s3.58 8 8 8m0-14c3.31 0 6 2.69 6 6s-2.69 6-6 6s-6-2.69-6-6s2.69-6 6-6\"\n          /></svg\n        >\n      </div>\n      <div class=\"card-text\">Record Test Cases</div>\n      <div class=\"card-arrow\">➔</div>\n    </div>\n    <div\n      class=\"card\"\n      on:click={toggleTesting}\n      on:keydown={(e) => e.key === \"Enter\" && toggleTesting()}\n      tabindex=\"0\"\n      role=\"button\"\n      id=\"startTestingButton\"\n      bind:this={startTestingButton}\n    >\n      <div class=\"card-icon replay-icon\"></div>\n      <div class=\"card-text\">Replay Test Cases</div>\n      <div class=\"card-arrow\">➔</div>\n    </div>\n  </div>\n\n  {#if showSteps}\n    <div class=\"steps\" transition:fly={{ y: 20, duration: 300 }}>\n      {#if isRecording}\n        {#each recordingSteps as step}\n          <div class=\"step\">{step}</div>\n        {/each}\n      {:else if isTesting}\n        {#each replayingSteps as step}\n          <div class=\"step\">{step}</div>\n        {/each}\n      {/if}\n    </div>\n  {/if}\n  <div class=\"loader\" id=\"loader\"></div>\n</div>\n\n<style>\n  .container {\n    padding: 16px;\n\n    /* font-family: 'Arial', sans-serif; */\n  }\n\n  .header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 10px;\n    margin-top: 28px;\n    flex-direction: column;\n  }\n  .icon-buttons {\n    display: flex;\n    justify-content: space-around;\n    border: 2px solid;\n    border-color: var(--vscode-button-secondaryBackground);\n    border-radius: 5px;\n    padding: 5px;\n  }\n  .icon-button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    /* background-color: var(--vscode-button-background); */\n    background-color: var(--vscode-button-secondaryBackground);\n    border-radius: 5px;\n    /* border: 2px solid transparent; */\n    color: #ff914d;\n    font-size: 24px;\n    height: 40px;\n    width: 80svw;\n    cursor: pointer;\n  }\n  .icon-button.selected {\n    /* border-color: #ff9933; */\n    /* background-color: var(--vscode-button-background); */\n    background-color: #00163d;\n  }\n  .icon-button:hover {\n    color: #ff9933;\n    background-color: #606060;\n\n    /* background-color: #f9f9f9; */\n  }\n  .heading {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    text-align: center;\n  }\n\n  .header h1 {\n    font-size: 24px;\n    margin: 0;\n  }\n\n  .section {\n    margin-bottom: 32px;\n  }\n\n  #testResults {\n    margin: 20px auto;\n    text-align: left;\n    display: grid;\n    place-items: center;\n    grid-template-columns: 1fr;\n  }\n  #testStatus {\n    text-align: center;\n    display: none;\n  }\n  #viewCompleteSummaryButton,\n  #viewTestLogsButton,\n  #viewRecordLogsButton {\n    display: none;\n    width: 100%;\n    margin: 10px auto;\n  }\n  #recordStatus {\n    display: none;\n    text-align: center;\n    margin: 20px;\n    font-weight: bold;\n  }\n  #recordedTestCases {\n    display: none;\n    grid-template-columns: 1fr;\n    place-items: center;\n  }\n  .statusdiv {\n    display: grid;\n    grid-template-columns: 1fr;\n    place-items: center;\n  }\n  #testResults {\n    text-align: left;\n  }\n\n  .card {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 16px;\n    margin-bottom: 16px;\n    /* background-color: var(--vscode-button-background); */\n    background-color: #00163d;\n    color: #ff9933;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    transition: background-color 0.3s;\n    cursor: pointer;\n  }\n\n  .card-icon {\n    display: flex;\n    align-items: center;\n    font-size: 24px;\n    height: 35px;\n    width: 35px;\n\n    margin-right: 16px;\n    color: #ff6f61;\n  }\n\n  .card-text {\n    flex-grow: 1;\n    font-size: 20px;\n    color: white;\n  }\n\n  .card-arrow {\n    font-size: 20px;\n    color: white;\n  }\n\n  .steps {\n    margin-top: 16px;\n    padding: 16px;\n    /* background-color: #e9e9e9; */\n    /* color: #b0b0b0; */\n    font-size: 16px;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  }\n\n  .step {\n    margin-bottom: 8px;\n  }\n\n  .stop-button {\n    display: inline;\n    cursor: pointer;\n    color: red;\n    font-size: 24px;\n    margin-left: 16px;\n  }\n  .loader {\n    display: none;\n  }\n  /* #animationWindow {\n    width: 400px;\n    height: 400px;\n  } */\n\n  .icon-button {\n    cursor: pointer;\n  }\n  .tooltip {\n    display: none;\n    position: absolute;\n    /* background-color: var(--vscode-button-background); */\n    background-color: #00163d;\n    color: white;\n    text-align: center;\n    border-radius: 6px;\n    padding: 5px;\n    width: 120px;\n    z-index: 1;\n    font-size: x-small;\n    top: 80px;\n  }\n  .icon-button:hover .tooltip {\n    display: block;\n  }\n  #completeSummaryHr {\n    display: none;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}